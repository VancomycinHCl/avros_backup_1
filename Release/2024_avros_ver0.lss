
2024_avros_ver0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00000970  00000a04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000970  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000060c  00800200  00800200  00000a04  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000a78  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012d3  00000000  00000000  00000b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e29  00000000  00000000  00001e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009fc  00000000  00000000  00002c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000158  00000000  00000000  00003630  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000079f  00000000  00000000  00003788  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000245  00000000  00000000  00003f27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000416c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	2a c1       	rjmp	.+596    	; 0x29a <__vector_17>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	28 e0       	ldi	r18, 0x08	; 8
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	ac 30       	cpi	r26, 0x0C	; 12
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	e7 d0       	rcall	.+462    	; 0x2d4 <main>
 106:	32 c4       	rjmp	.+2148   	; 0x96c <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <startup_thread>:
.equ MAX_THREADS,2
.equ SREG,0x3F
.equ TLB_SIZE,0x04

startup_thread:
 	lds r16, currentThread       ; 加载 currentThread 的值到 r16
 10a:	00 91 02 02 	lds	r16, 0x0202	; 0x800202 <currentThread>
    ldi r17, TLB_SIZE            ; 加载 TCB 的大小到 r17 (4 字节)
 10e:	14 e0       	ldi	r17, 0x04	; 4
    mul r16, r17                 ; r0:r1 = r16 * r17 (结果在 r0:r1)
 110:	01 9f       	mul	r16, r17
    ldi r30, lo8(threadList)     ; 加载 threadList 的低位地址到 Z 寄存器 (r30)
 112:	e4 e0       	ldi	r30, 0x04	; 4
    ldi r31, hi8(threadList)     ; 加载 threadList 的高位地址到 Z 寄存器 (r31)
 114:	f8 e0       	ldi	r31, 0x08	; 8
    add r30, r0                  ; 将乘法结果的低位加到 Z 寄存器的低位
 116:	e0 0d       	add	r30, r0
    adc r31, r1                  ; 将乘法结果的高位加到 Z 寄存器的高位，考虑进位
 118:	f1 1d       	adc	r31, r1
    clr r1                       ; 清除 r1，因为 mul 指令会使用到它
 11a:	11 24       	eor	r1, r1
	ld  r16, Z+
 11c:	01 91       	ld	r16, Z+
	ld  r17, Z
 11e:	10 81       	ld	r17, Z
    out SPL, r16
 120:	0d bf       	out	0x3d, r16	; 61
    out SPH, r17
 122:	1e bf       	out	0x3e, r17	; 62

	pop r31 
 124:	ff 91       	pop	r31
	pop r30 
 126:	ef 91       	pop	r30
	pop r29 
 128:	df 91       	pop	r29
	pop r28 
 12a:	cf 91       	pop	r28
	pop r27 
 12c:	bf 91       	pop	r27
	pop r26 
 12e:	af 91       	pop	r26
	pop r25 
 130:	9f 91       	pop	r25
	pop r24 
 132:	8f 91       	pop	r24
	pop r23 
 134:	7f 91       	pop	r23
	pop r22 
 136:	6f 91       	pop	r22
	pop r21 
 138:	5f 91       	pop	r21
	pop r20 
 13a:	4f 91       	pop	r20
	pop r19 
 13c:	3f 91       	pop	r19
	pop r18 
 13e:	2f 91       	pop	r18
	pop r17 
 140:	1f 91       	pop	r17
	pop r16 
 142:	0f 91       	pop	r16
	pop r15 
 144:	ff 90       	pop	r15
	pop r14 
 146:	ef 90       	pop	r14
	pop r13 
 148:	df 90       	pop	r13
	pop r12 
 14a:	cf 90       	pop	r12
	pop r11 
 14c:	bf 90       	pop	r11
	pop r10 
 14e:	af 90       	pop	r10
	pop r9 
 150:	9f 90       	pop	r9
	pop r8 
 152:	8f 90       	pop	r8
	pop r7 
 154:	7f 90       	pop	r7
	pop r6 
 156:	6f 90       	pop	r6
	pop r5 
 158:	5f 90       	pop	r5
	pop r4 
 15a:	4f 90       	pop	r4
	pop r3 
 15c:	3f 90       	pop	r3
	pop r2 
 15e:	2f 90       	pop	r2
	pop r1 
 160:	1f 90       	pop	r1
    ; ... 恢复其他寄存器 ...
    pop r0
 162:	0f 90       	pop	r0
    out SREG, r0
 164:	0f be       	out	0x3f, r0	; 63
    pop r0
 166:	0f 90       	pop	r0
	sei;    恢复中断使能
 168:	78 94       	sei
    ; ... 恢复其他寄存器 ...
 16a:	08 95       	ret

0000016c <switch_threads>:
.equ MAX_THREADS,2
.equ SREG,0x3F
.equ TLB_SIZE,0x04

switch_threads:
	rjmp save_prev_thread
 16c:	00 c0       	rjmp	.+0      	; 0x16e <save_prev_thread>

0000016e <save_prev_thread>:
save_prev_thread:
    ; 保存当前线程的栈指针
	cli
 16e:	f8 94       	cli
    push r0
 170:	0f 92       	push	r0
    in r0, SREG
 172:	0f b6       	in	r0, 0x3f	; 63
    push r0
 174:	0f 92       	push	r0
    ; ... 保存其他寄存器 ...
	push r1
 176:	1f 92       	push	r1
	push r2
 178:	2f 92       	push	r2
	push r3
 17a:	3f 92       	push	r3
	push r4
 17c:	4f 92       	push	r4
	push r5
 17e:	5f 92       	push	r5
	push r6
 180:	6f 92       	push	r6
	push r7
 182:	7f 92       	push	r7
	push r8
 184:	8f 92       	push	r8
	push r9
 186:	9f 92       	push	r9
	push r10
 188:	af 92       	push	r10
	push r11
 18a:	bf 92       	push	r11
	push r12
 18c:	cf 92       	push	r12
	push r13
 18e:	df 92       	push	r13
	push r14
 190:	ef 92       	push	r14
	push r15
 192:	ff 92       	push	r15
	push r16
 194:	0f 93       	push	r16
	push r17
 196:	1f 93       	push	r17
	push r18
 198:	2f 93       	push	r18
	push r19
 19a:	3f 93       	push	r19
	push r20
 19c:	4f 93       	push	r20
	push r21
 19e:	5f 93       	push	r21
	push r22
 1a0:	6f 93       	push	r22
	push r23
 1a2:	7f 93       	push	r23
	push r24
 1a4:	8f 93       	push	r24
	push r25
 1a6:	9f 93       	push	r25
	push r26
 1a8:	af 93       	push	r26
	push r27
 1aa:	bf 93       	push	r27
	push r28
 1ac:	cf 93       	push	r28
	push r29
 1ae:	df 93       	push	r29
	push r30
 1b0:	ef 93       	push	r30
	push r31
 1b2:	ff 93       	push	r31

    ; 保存当前栈指针到 threadList[currentThread].stackPointer
	lds r16, currentThread   ; 加载 currentThread 的值到 r16
 1b4:	00 91 02 02 	lds	r16, 0x0202	; 0x800202 <currentThread>
	ldi r17, TLB_SIZE		 ; 加载 TCB 的大小到 r17 (4 字节)
 1b8:	14 e0       	ldi	r17, 0x04	; 4
	mul r16, r17			 ; r0:r1 = r16 * r17 (结果在 r0:r1)
 1ba:	01 9f       	mul	r16, r17
	in r18, SPL
 1bc:	2d b7       	in	r18, 0x3d	; 61
	in r19, SPH
 1be:	3e b7       	in	r19, 0x3e	; 62
	ldi r30, lo8(threadList) ; 加载 threadList 的低位地址到 Z 寄存器 (r30)
 1c0:	e4 e0       	ldi	r30, 0x04	; 4
	ldi r31, hi8(threadList) ; 加载 threadList 的高位地址到 Z 寄存器 (r31)
 1c2:	f8 e0       	ldi	r31, 0x08	; 8
	add r30, r0				 ; 将乘法结果的低位加到 Z 寄存器的低位
 1c4:	e0 0d       	add	r30, r0
	adc r31, r1				 ; 将乘法结果的高位加到 Z 寄存器的高位，考虑进位
 1c6:	f1 1d       	adc	r31, r1
	st Z+, r18
 1c8:	21 93       	st	Z+, r18
	st Z+, r19
 1ca:	31 93       	st	Z+, r19

	
	rcall thread_scheduling  ;
 1cc:	31 d0       	rcall	.+98     	; 0x230 <thread_scheduling>

000001ce <restore_next_thread>:

restore_next_thread:
    ; 恢复下一个线程的栈指针
	lds r16, currentThread       ; 加载 currentThread 的值到 r16
 1ce:	00 91 02 02 	lds	r16, 0x0202	; 0x800202 <currentThread>
    ldi r17, TLB_SIZE            ; 加载 TCB 的大小到 r17 (4 字节)
 1d2:	14 e0       	ldi	r17, 0x04	; 4
    mul r16, r17                 ; r0:r1 = r16 * r17 (结果在 r0:r1)
 1d4:	01 9f       	mul	r16, r17
    ldi r30, lo8(threadList)     ; 加载 threadList 的低位地址到 Z 寄存器 (r30)
 1d6:	e4 e0       	ldi	r30, 0x04	; 4
    ldi r31, hi8(threadList)     ; 加载 threadList 的高位地址到 Z 寄存器 (r31)
 1d8:	f8 e0       	ldi	r31, 0x08	; 8
    add r30, r0                  ; 将乘法结果的低位加到 Z 寄存器的低位
 1da:	e0 0d       	add	r30, r0
    adc r31, r1                  ; 将乘法结果的高位加到 Z 寄存器的高位，考虑进位
 1dc:	f1 1d       	adc	r31, r1
    clr r1                       ; 清除 r1，因为 mul 指令会使用到它
 1de:	11 24       	eor	r1, r1
	ld  r16, Z+
 1e0:	01 91       	ld	r16, Z+
	ld  r17, Z
 1e2:	10 81       	ld	r17, Z
    out SPL, r16
 1e4:	0d bf       	out	0x3d, r16	; 61
    out SPH, r17
 1e6:	1e bf       	out	0x3e, r17	; 62
	pop r31 
 1e8:	ff 91       	pop	r31
	pop r30 
 1ea:	ef 91       	pop	r30
	pop r29 
 1ec:	df 91       	pop	r29
	pop r28 
 1ee:	cf 91       	pop	r28
	pop r27 
 1f0:	bf 91       	pop	r27
	pop r26 
 1f2:	af 91       	pop	r26
	pop r25 
 1f4:	9f 91       	pop	r25
	pop r24 
 1f6:	8f 91       	pop	r24
	pop r23 
 1f8:	7f 91       	pop	r23
	pop r22 
 1fa:	6f 91       	pop	r22
	pop r21 
 1fc:	5f 91       	pop	r21
	pop r20 
 1fe:	4f 91       	pop	r20
	pop r19 
 200:	3f 91       	pop	r19
	pop r18 
 202:	2f 91       	pop	r18
	pop r17 
 204:	1f 91       	pop	r17
	pop r16 
 206:	0f 91       	pop	r16
	pop r15 
 208:	ff 90       	pop	r15
	pop r14 
 20a:	ef 90       	pop	r14
	pop r13 
 20c:	df 90       	pop	r13
	pop r12 
 20e:	cf 90       	pop	r12
	pop r11 
 210:	bf 90       	pop	r11
	pop r10 
 212:	af 90       	pop	r10
	pop r9 
 214:	9f 90       	pop	r9
	pop r8 
 216:	8f 90       	pop	r8
	pop r7 
 218:	7f 90       	pop	r7
	pop r6 
 21a:	6f 90       	pop	r6
	pop r5 
 21c:	5f 90       	pop	r5
	pop r4 
 21e:	4f 90       	pop	r4
	pop r3 
 220:	3f 90       	pop	r3
	pop r2 
 222:	2f 90       	pop	r2
	pop r1 
 224:	1f 90       	pop	r1
    ; ... 恢复其他寄存器 ...
    pop r0
 226:	0f 90       	pop	r0
    out SREG, r0
 228:	0f be       	out	0x3f, r0	; 63
    pop r0
 22a:	0f 90       	pop	r0
    ; ... 恢复其他寄存器 ...
	sei
 22c:	78 94       	sei
	ret
 22e:	08 95       	ret

00000230 <thread_scheduling>:


thread_scheduling:
    lds r16, currentThread
 230:	00 91 02 02 	lds	r16, 0x0202	; 0x800202 <currentThread>
    inc r16
 234:	03 95       	inc	r16
    cpi r16, MAX_THREADS
 236:	02 30       	cpi	r16, 0x02	; 2
    brlo not_max
 238:	10 f0       	brcs	.+4      	; 0x23e <not_max>
    clr r16
 23a:	00 27       	eor	r16, r16
	ret
 23c:	08 95       	ret

0000023e <not_max>:
not_max:
    sts currentThread, r16
 23e:	00 93 02 02 	sts	0x0202, r16	; 0x800202 <currentThread>
 242:	08 95       	ret

00000244 <timer_init>:
#include <util/atomic.h>

static int i = 0;

// Timer configuration for ATMEL Mega 2560
void timer_init() {
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
	// Set the Timer Mode to CTC
	TCCR1B |= (1 << WGM12);
 24c:	81 e8       	ldi	r24, 0x81	; 129
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	21 e8       	ldi	r18, 0x81	; 129
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	f9 01       	movw	r30, r18
 256:	20 81       	ld	r18, Z
 258:	28 60       	ori	r18, 0x08	; 8
 25a:	fc 01       	movw	r30, r24
 25c:	20 83       	st	Z, r18
	// Set the value that you want to count to
	OCR1A = 1562; // This will allow the timer to count for 1 second with a 16MHz clock 15624 for 1s
 25e:	88 e8       	ldi	r24, 0x88	; 136
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	2a e1       	ldi	r18, 0x1A	; 26
 264:	36 e0       	ldi	r19, 0x06	; 6
 266:	fc 01       	movw	r30, r24
 268:	31 83       	std	Z+1, r19	; 0x01
 26a:	20 83       	st	Z, r18
	// Set the prescaler to 256 and start the timer
	TCCR1B |= (1 << CS12);
 26c:	81 e8       	ldi	r24, 0x81	; 129
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	21 e8       	ldi	r18, 0x81	; 129
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	f9 01       	movw	r30, r18
 276:	20 81       	ld	r18, Z
 278:	24 60       	ori	r18, 0x04	; 4
 27a:	fc 01       	movw	r30, r24
 27c:	20 83       	st	Z, r18
	// Enable the compare interrupt
	TIMSK1 |= (1 << OCIE1A);
 27e:	8f e6       	ldi	r24, 0x6F	; 111
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	2f e6       	ldi	r18, 0x6F	; 111
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	f9 01       	movw	r30, r18
 288:	20 81       	ld	r18, Z
 28a:	22 60       	ori	r18, 0x02	; 2
 28c:	fc 01       	movw	r30, r24
 28e:	20 83       	st	Z, r18
	// Initialize global interrupts
	sei();
 290:	78 94       	sei
}
 292:	00 00       	nop
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	08 95       	ret

0000029a <__vector_17>:


// Interrupt Service Routine for Timer1 compare match
ISR(TIMER1_COMPA_vect,ISR_NAKED ) 
{
	asm volatile("rjmp switch_threads\n");
 29a:	68 cf       	rjmp	.-304    	; 0x16c <switch_threads>
	...

0000029e <thread0>:
}



void thread0()
{
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{
		PORTB |= 0xFF;
 2a6:	85 e2       	ldi	r24, 0x25	; 37
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	fc 01       	movw	r30, r24
 2ac:	80 81       	ld	r24, Z
 2ae:	85 e2       	ldi	r24, 0x25	; 37
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	2f ef       	ldi	r18, 0xFF	; 255
 2b4:	fc 01       	movw	r30, r24
 2b6:	20 83       	st	Z, r18
	}
 2b8:	f6 cf       	rjmp	.-20     	; 0x2a6 <thread0+0x8>

000002ba <thread1>:
}

void thread1()
{
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62

	while(1)
	{
		PORTB &= 0x00;
 2c2:	85 e2       	ldi	r24, 0x25	; 37
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	fc 01       	movw	r30, r24
 2c8:	80 81       	ld	r24, Z
 2ca:	85 e2       	ldi	r24, 0x25	; 37
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	fc 01       	movw	r30, r24
 2d0:	10 82       	st	Z, r1
	}
 2d2:	f7 cf       	rjmp	.-18     	; 0x2c2 <thread1+0x8>

000002d4 <main>:
}



int main() {
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	cd b7       	in	r28, 0x3d	; 61
 2da:	de b7       	in	r29, 0x3e	; 62
	// Initialize the timer
	
	timer_init();
 2dc:	b3 df       	rcall	.-154    	; 0x244 <timer_init>
	DDRB |= (1 << DDB7); 
 2de:	84 e2       	ldi	r24, 0x24	; 36
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	24 e2       	ldi	r18, 0x24	; 36
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	f9 01       	movw	r30, r18
 2e8:	20 81       	ld	r18, Z
 2ea:	20 68       	ori	r18, 0x80	; 128
 2ec:	fc 01       	movw	r30, r24
 2ee:	20 83       	st	Z, r18
	DDRA |= (1 << DDA1);
 2f0:	81 e2       	ldi	r24, 0x21	; 33
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	21 e2       	ldi	r18, 0x21	; 33
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	f9 01       	movw	r30, r18
 2fa:	20 81       	ld	r18, Z
 2fc:	22 60       	ori	r18, 0x02	; 2
 2fe:	fc 01       	movw	r30, r24
 300:	20 83       	st	Z, r18
	PORTB |= 0xFF;
 302:	85 e2       	ldi	r24, 0x25	; 37
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	fc 01       	movw	r30, r24
 308:	80 81       	ld	r24, Z
 30a:	85 e2       	ldi	r24, 0x25	; 37
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	2f ef       	ldi	r18, 0xFF	; 255
 310:	fc 01       	movw	r30, r24
 312:	20 83       	st	Z, r18
	PORTA |= 0xFF;
 314:	82 e2       	ldi	r24, 0x22	; 34
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	fc 01       	movw	r30, r24
 31a:	80 81       	ld	r24, Z
 31c:	82 e2       	ldi	r24, 0x22	; 34
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	2f ef       	ldi	r18, 0xFF	; 255
 322:	fc 01       	movw	r30, r24
 324:	20 83       	st	Z, r18
	
	setup_threads(&threadList[0],thread_stack_0,&thread0);
 326:	4f e4       	ldi	r20, 0x4F	; 79
 328:	51 e0       	ldi	r21, 0x01	; 1
 32a:	64 e0       	ldi	r22, 0x04	; 4
 32c:	72 e0       	ldi	r23, 0x02	; 2
 32e:	84 e0       	ldi	r24, 0x04	; 4
 330:	98 e0       	ldi	r25, 0x08	; 8
 332:	09 d0       	rcall	.+18     	; 0x346 <setup_threads>
	setup_threads(&threadList[1],thread_stack_1,&thread1);
 334:	4d e5       	ldi	r20, 0x5D	; 93
 336:	51 e0       	ldi	r21, 0x01	; 1
 338:	64 e0       	ldi	r22, 0x04	; 4
 33a:	76 e0       	ldi	r23, 0x06	; 6
 33c:	88 e0       	ldi	r24, 0x08	; 8
 33e:	98 e0       	ldi	r25, 0x08	; 8
	startup_thread();
 340:	02 d0       	rcall	.+4      	; 0x346 <setup_threads>
 342:	e3 de       	rcall	.-570    	; 0x10a <startup_thread>
	// Main loop
	while(1) 
	{
		// printf("asdf");
	}
 344:	ff cf       	rjmp	.-2      	; 0x344 <main+0x70>

00000346 <setup_threads>:

#include "thread.h"
#include <string.h>

void setup_threads(TCB* tcb_ptr, uint8_t* stack_bottom_ptr,void* thread_function)
{
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	cd b7       	in	r28, 0x3d	; 61
 34c:	de b7       	in	r29, 0x3e	; 62
 34e:	28 97       	sbiw	r28, 0x08	; 8
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	f8 94       	cli
 354:	de bf       	out	0x3e, r29	; 62
 356:	0f be       	out	0x3f, r0	; 63
 358:	cd bf       	out	0x3d, r28	; 61
 35a:	9c 83       	std	Y+4, r25	; 0x04
 35c:	8b 83       	std	Y+3, r24	; 0x03
 35e:	7e 83       	std	Y+6, r23	; 0x06
 360:	6d 83       	std	Y+5, r22	; 0x05
 362:	58 87       	std	Y+8, r21	; 0x08
 364:	4f 83       	std	Y+7, r20	; 0x07
	// 先封栈底，栈底（也就是空栈栈顶）是PC指针的位置，即线程函数的指针
	// ATMEL的架构是从一般状态进入中断时先把手头执行的函数指针push进栈顶
	// 中断函数执行完毕后再把栈底的函数指针pop出栈顶
	// 整个过程是硬件自动执行的
	uint8_t* stack_top_ptr = stack_bottom_ptr + STACK_SIZE - 1;
 366:	8d 81       	ldd	r24, Y+5	; 0x05
 368:	9e 81       	ldd	r25, Y+6	; 0x06
 36a:	81 50       	subi	r24, 0x01	; 1
 36c:	9e 4f       	sbci	r25, 0xFE	; 254
 36e:	9a 83       	std	Y+2, r25	; 0x02
 370:	89 83       	std	Y+1, r24	; 0x01
	*stack_top_ptr     = 0x00;
 372:	89 81       	ldd	r24, Y+1	; 0x01
 374:	9a 81       	ldd	r25, Y+2	; 0x02
 376:	fc 01       	movw	r30, r24
 378:	10 82       	st	Z, r1
	*(stack_top_ptr-1) = 0x00;
 37a:	89 81       	ldd	r24, Y+1	; 0x01
 37c:	9a 81       	ldd	r25, Y+2	; 0x02
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	fc 01       	movw	r30, r24
 382:	10 82       	st	Z, r1
	stack_top_ptr -= 3;
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	9a 81       	ldd	r25, Y+2	; 0x02
 388:	03 97       	sbiw	r24, 0x03	; 3
 38a:	9a 83       	std	Y+2, r25	; 0x02
 38c:	89 83       	std	Y+1, r24	; 0x01
	*stack_top_ptr     = (uint16_t) thread_function  & 0xFF;
 38e:	8f 81       	ldd	r24, Y+7	; 0x07
 390:	98 85       	ldd	r25, Y+8	; 0x08
 392:	28 2f       	mov	r18, r24
 394:	89 81       	ldd	r24, Y+1	; 0x01
 396:	9a 81       	ldd	r25, Y+2	; 0x02
 398:	fc 01       	movw	r30, r24
 39a:	20 83       	st	Z, r18
	*(stack_top_ptr-1) = (uint16_t) thread_function >> 0x08;
 39c:	89 81       	ldd	r24, Y+1	; 0x01
 39e:	9a 81       	ldd	r25, Y+2	; 0x02
 3a0:	01 97       	sbiw	r24, 0x01	; 1
 3a2:	2f 81       	ldd	r18, Y+7	; 0x07
 3a4:	38 85       	ldd	r19, Y+8	; 0x08
 3a6:	23 2f       	mov	r18, r19
 3a8:	33 27       	eor	r19, r19
 3aa:	fc 01       	movw	r30, r24
 3ac:	20 83       	st	Z, r18
	stack_top_ptr -= 3;
 3ae:	89 81       	ldd	r24, Y+1	; 0x01
 3b0:	9a 81       	ldd	r25, Y+2	; 0x02
 3b2:	03 97       	sbiw	r24, 0x03	; 3
 3b4:	9a 83       	std	Y+2, r25	; 0x02
 3b6:	89 83       	std	Y+1, r24	; 0x01
	// 然后初始化各个寄存器，通用寄存器32bytes，状态寄存器1byte，PC寄存器2byte，共35bytes
	// 只需要覆写33个寄存器即可
	memset(stack_top_ptr-33,0x00,33);
 3b8:	89 81       	ldd	r24, Y+1	; 0x01
 3ba:	9a 81       	ldd	r25, Y+2	; 0x02
 3bc:	81 97       	sbiw	r24, 0x21	; 33
 3be:	41 e2       	ldi	r20, 0x21	; 33
 3c0:	50 e0       	ldi	r21, 0x00	; 0
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	70 e0       	ldi	r23, 0x00	; 0
 3c6:	cb d2       	rcall	.+1430   	; 0x95e <memset>
	// 然后把当前栈顶存到TCB里
	tcb_ptr->stackPointer = stack_top_ptr -33;
 3c8:	89 81       	ldd	r24, Y+1	; 0x01
 3ca:	9a 81       	ldd	r25, Y+2	; 0x02
 3cc:	9c 01       	movw	r18, r24
 3ce:	21 52       	subi	r18, 0x21	; 33
 3d0:	31 09       	sbc	r19, r1
 3d2:	8b 81       	ldd	r24, Y+3	; 0x03
 3d4:	9c 81       	ldd	r25, Y+4	; 0x04
 3d6:	fc 01       	movw	r30, r24
 3d8:	31 83       	std	Z+1, r19	; 0x01
 3da:	20 83       	st	Z, r18
}
 3dc:	00 00       	nop
 3de:	28 96       	adiw	r28, 0x08	; 8
 3e0:	0f b6       	in	r0, 0x3f	; 63
 3e2:	f8 94       	cli
 3e4:	de bf       	out	0x3e, r29	; 62
 3e6:	0f be       	out	0x3f, r0	; 63
 3e8:	cd bf       	out	0x3d, r28	; 61
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	08 95       	ret

000003f0 <switch_thread_new>:

TCB threadList[MAX_THREADS]; // 线程列表
int currentThread=0;

extern void switch_thread_new(void)
{
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	cd b7       	in	r28, 0x3d	; 61
 3f6:	de b7       	in	r29, 0x3e	; 62
	return;
 3f8:	00 00       	nop
}
 3fa:	df 91       	pop	r29
 3fc:	cf 91       	pop	r28
 3fe:	08 95       	ret

00000400 <get_thread_by_pid>:

TCB_new* get_thread_by_pid(int pid)
{
 400:	cf 93       	push	r28
 402:	df 93       	push	r29
 404:	1f 92       	push	r1
 406:	1f 92       	push	r1
 408:	cd b7       	in	r28, 0x3d	; 61
 40a:	de b7       	in	r29, 0x3e	; 62
 40c:	9a 83       	std	Y+2, r25	; 0x02
 40e:	89 83       	std	Y+1, r24	; 0x01
	return &(threadList[pid]);
 410:	89 81       	ldd	r24, Y+1	; 0x01
 412:	9a 81       	ldd	r25, Y+2	; 0x02
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	8c 5f       	subi	r24, 0xFC	; 252
 41e:	97 4f       	sbci	r25, 0xF7	; 247
}
 420:	0f 90       	pop	r0
 422:	0f 90       	pop	r0
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
 428:	08 95       	ret

0000042a <delay_thread_ms>:

void delay_thread_ms(int delay_interval_ms)
{
 42a:	cf 93       	push	r28
 42c:	df 93       	push	r29
 42e:	00 d0       	rcall	.+0      	; 0x430 <delay_thread_ms+0x6>
 430:	1f 92       	push	r1
 432:	cd b7       	in	r28, 0x3d	; 61
 434:	de b7       	in	r29, 0x3e	; 62
 436:	9c 83       	std	Y+4, r25	; 0x04
 438:	8b 83       	std	Y+3, r24	; 0x03
	cli();
 43a:	f8 94       	cli
	TCB_new* current_thread_ptr				 = get_thread_by_pid(currentThread);
 43c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <currentThread>
 440:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <currentThread+0x1>
 444:	dd df       	rcall	.-70     	; 0x400 <get_thread_by_pid>
 446:	9a 83       	std	Y+2, r25	; 0x02
 448:	89 83       	std	Y+1, r24	; 0x01
	current_thread_ptr->tcb_status			 = TCB_STATUS_SUSPENED;
 44a:	89 81       	ldd	r24, Y+1	; 0x01
 44c:	9a 81       	ldd	r25, Y+2	; 0x02
 44e:	23 e0       	ldi	r18, 0x03	; 3
 450:	fc 01       	movw	r30, r24
 452:	25 83       	std	Z+5, r18	; 0x05
	#ifdef THREAD_TIME_INTERVAL_1MS
	current_thread_ptr->tcb_delay_cyc_cnt	 = delay_interval_ms;
 454:	2b 81       	ldd	r18, Y+3	; 0x03
 456:	3c 81       	ldd	r19, Y+4	; 0x04
 458:	89 81       	ldd	r24, Y+1	; 0x01
 45a:	9a 81       	ldd	r25, Y+2	; 0x02
 45c:	fc 01       	movw	r30, r24
 45e:	37 83       	std	Z+7, r19	; 0x07
 460:	26 83       	std	Z+6, r18	; 0x06
	THREAD_YIELD();
 462:	84 e8       	ldi	r24, 0x84	; 132
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	29 eb       	ldi	r18, 0xB9	; 185
 468:	39 e0       	ldi	r19, 0x09	; 9
 46a:	fc 01       	movw	r30, r24
 46c:	31 83       	std	Z+1, r19	; 0x01
 46e:	20 83       	st	Z, r18
	#endif // THREAD_TIME_INTERVAL_1MS
	sei();
 470:	78 94       	sei
}
 472:	00 00       	nop
 474:	0f 90       	pop	r0
 476:	0f 90       	pop	r0
 478:	0f 90       	pop	r0
 47a:	0f 90       	pop	r0
 47c:	df 91       	pop	r29
 47e:	cf 91       	pop	r28
 480:	08 95       	ret

00000482 <delay_thread_us>:

void delay_thread_us(double delay_interval_us)
{
 482:	cf 93       	push	r28
 484:	df 93       	push	r29
 486:	cd b7       	in	r28, 0x3d	; 61
 488:	de b7       	in	r29, 0x3e	; 62
 48a:	a4 97       	sbiw	r28, 0x24	; 36
 48c:	0f b6       	in	r0, 0x3f	; 63
 48e:	f8 94       	cli
 490:	de bf       	out	0x3e, r29	; 62
 492:	0f be       	out	0x3f, r0	; 63
 494:	cd bf       	out	0x3d, r28	; 61
 496:	69 a3       	std	Y+33, r22	; 0x21
 498:	7a a3       	std	Y+34, r23	; 0x22
 49a:	8b a3       	std	Y+35, r24	; 0x23
 49c:	9c a3       	std	Y+36, r25	; 0x24
	cli();
 49e:	f8 94       	cli
 4a0:	89 a1       	ldd	r24, Y+33	; 0x21
 4a2:	9a a1       	ldd	r25, Y+34	; 0x22
 4a4:	ab a1       	ldd	r26, Y+35	; 0x23
 4a6:	bc a1       	ldd	r27, Y+36	; 0x24
 4a8:	89 83       	std	Y+1, r24	; 0x01
 4aa:	9a 83       	std	Y+2, r25	; 0x02
 4ac:	ab 83       	std	Y+3, r26	; 0x03
 4ae:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
 4b0:	2b ea       	ldi	r18, 0xAB	; 171
 4b2:	3a ea       	ldi	r19, 0xAA	; 170
 4b4:	4a ea       	ldi	r20, 0xAA	; 170
 4b6:	50 e4       	ldi	r21, 0x40	; 64
 4b8:	69 81       	ldd	r22, Y+1	; 0x01
 4ba:	7a 81       	ldd	r23, Y+2	; 0x02
 4bc:	8b 81       	ldd	r24, Y+3	; 0x03
 4be:	9c 81       	ldd	r25, Y+4	; 0x04
 4c0:	eb d1       	rcall	.+982    	; 0x898 <__mulsf3>
 4c2:	dc 01       	movw	r26, r24
 4c4:	cb 01       	movw	r24, r22
 4c6:	8d 83       	std	Y+5, r24	; 0x05
 4c8:	9e 83       	std	Y+6, r25	; 0x06
 4ca:	af 83       	std	Y+7, r26	; 0x07
 4cc:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
 4ce:	20 e0       	ldi	r18, 0x00	; 0
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	40 e8       	ldi	r20, 0x80	; 128
 4d4:	50 e4       	ldi	r21, 0x40	; 64
 4d6:	69 81       	ldd	r22, Y+1	; 0x01
 4d8:	7a 81       	ldd	r23, Y+2	; 0x02
 4da:	8b 81       	ldd	r24, Y+3	; 0x03
 4dc:	9c 81       	ldd	r25, Y+4	; 0x04
 4de:	dc d1       	rcall	.+952    	; 0x898 <__mulsf3>
 4e0:	dc 01       	movw	r26, r24
 4e2:	cb 01       	movw	r24, r22
 4e4:	89 87       	std	Y+9, r24	; 0x09
 4e6:	9a 87       	std	Y+10, r25	; 0x0a
 4e8:	ab 87       	std	Y+11, r26	; 0x0b
 4ea:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 4ec:	20 e0       	ldi	r18, 0x00	; 0
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	40 e8       	ldi	r20, 0x80	; 128
 4f2:	5f e3       	ldi	r21, 0x3F	; 63
 4f4:	6d 81       	ldd	r22, Y+5	; 0x05
 4f6:	7e 81       	ldd	r23, Y+6	; 0x06
 4f8:	8f 81       	ldd	r24, Y+7	; 0x07
 4fa:	98 85       	ldd	r25, Y+8	; 0x08
 4fc:	bc d0       	rcall	.+376    	; 0x676 <__cmpsf2>
 4fe:	88 23       	and	r24, r24
 500:	1c f4       	brge	.+6      	; 0x508 <delay_thread_us+0x86>
		__ticks = 1;
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	8d 87       	std	Y+13, r24	; 0x0d
 506:	a7 c0       	rjmp	.+334    	; 0x656 <delay_thread_us+0x1d4>
	else if (__tmp2 > 65535)
 508:	20 e0       	ldi	r18, 0x00	; 0
 50a:	3f ef       	ldi	r19, 0xFF	; 255
 50c:	4f e7       	ldi	r20, 0x7F	; 127
 50e:	57 e4       	ldi	r21, 0x47	; 71
 510:	69 85       	ldd	r22, Y+9	; 0x09
 512:	7a 85       	ldd	r23, Y+10	; 0x0a
 514:	8b 85       	ldd	r24, Y+11	; 0x0b
 516:	9c 85       	ldd	r25, Y+12	; 0x0c
 518:	bb d1       	rcall	.+886    	; 0x890 <__gesf2>
 51a:	18 16       	cp	r1, r24
 51c:	0c f0       	brlt	.+2      	; 0x520 <delay_thread_us+0x9e>
 51e:	74 c0       	rjmp	.+232    	; 0x608 <delay_thread_us+0x186>
	{
		_delay_ms(__us / 1000.0);
 520:	20 e0       	ldi	r18, 0x00	; 0
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	4a e7       	ldi	r20, 0x7A	; 122
 526:	54 e4       	ldi	r21, 0x44	; 68
 528:	69 81       	ldd	r22, Y+1	; 0x01
 52a:	7a 81       	ldd	r23, Y+2	; 0x02
 52c:	8b 81       	ldd	r24, Y+3	; 0x03
 52e:	9c 81       	ldd	r25, Y+4	; 0x04
 530:	a6 d0       	rcall	.+332    	; 0x67e <__divsf3>
 532:	dc 01       	movw	r26, r24
 534:	cb 01       	movw	r24, r22
 536:	8e 87       	std	Y+14, r24	; 0x0e
 538:	9f 87       	std	Y+15, r25	; 0x0f
 53a:	a8 8b       	std	Y+16, r26	; 0x10
 53c:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 53e:	20 e0       	ldi	r18, 0x00	; 0
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	4a e7       	ldi	r20, 0x7A	; 122
 544:	55 e4       	ldi	r21, 0x45	; 69
 546:	6e 85       	ldd	r22, Y+14	; 0x0e
 548:	7f 85       	ldd	r23, Y+15	; 0x0f
 54a:	88 89       	ldd	r24, Y+16	; 0x10
 54c:	99 89       	ldd	r25, Y+17	; 0x11
 54e:	a4 d1       	rcall	.+840    	; 0x898 <__mulsf3>
 550:	dc 01       	movw	r26, r24
 552:	cb 01       	movw	r24, r22
 554:	8a 8b       	std	Y+18, r24	; 0x12
 556:	9b 8b       	std	Y+19, r25	; 0x13
 558:	ac 8b       	std	Y+20, r26	; 0x14
 55a:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
 55c:	20 e0       	ldi	r18, 0x00	; 0
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	40 e8       	ldi	r20, 0x80	; 128
 562:	5f e3       	ldi	r21, 0x3F	; 63
 564:	6a 89       	ldd	r22, Y+18	; 0x12
 566:	7b 89       	ldd	r23, Y+19	; 0x13
 568:	8c 89       	ldd	r24, Y+20	; 0x14
 56a:	9d 89       	ldd	r25, Y+21	; 0x15
 56c:	84 d0       	rcall	.+264    	; 0x676 <__cmpsf2>
 56e:	88 23       	and	r24, r24
 570:	2c f4       	brge	.+10     	; 0x57c <delay_thread_us+0xfa>
		__ticks = 1;
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	9f 8b       	std	Y+23, r25	; 0x17
 578:	8e 8b       	std	Y+22, r24	; 0x16
 57a:	3b c0       	rjmp	.+118    	; 0x5f2 <delay_thread_us+0x170>
	else if (__tmp > 65535)
 57c:	20 e0       	ldi	r18, 0x00	; 0
 57e:	3f ef       	ldi	r19, 0xFF	; 255
 580:	4f e7       	ldi	r20, 0x7F	; 127
 582:	57 e4       	ldi	r21, 0x47	; 71
 584:	6a 89       	ldd	r22, Y+18	; 0x12
 586:	7b 89       	ldd	r23, Y+19	; 0x13
 588:	8c 89       	ldd	r24, Y+20	; 0x14
 58a:	9d 89       	ldd	r25, Y+21	; 0x15
 58c:	81 d1       	rcall	.+770    	; 0x890 <__gesf2>
 58e:	18 16       	cp	r1, r24
 590:	3c f5       	brge	.+78     	; 0x5e0 <delay_thread_us+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 592:	20 e0       	ldi	r18, 0x00	; 0
 594:	30 e0       	ldi	r19, 0x00	; 0
 596:	40 e2       	ldi	r20, 0x20	; 32
 598:	51 e4       	ldi	r21, 0x41	; 65
 59a:	6e 85       	ldd	r22, Y+14	; 0x0e
 59c:	7f 85       	ldd	r23, Y+15	; 0x0f
 59e:	88 89       	ldd	r24, Y+16	; 0x10
 5a0:	99 89       	ldd	r25, Y+17	; 0x11
 5a2:	7a d1       	rcall	.+756    	; 0x898 <__mulsf3>
 5a4:	dc 01       	movw	r26, r24
 5a6:	cb 01       	movw	r24, r22
 5a8:	bc 01       	movw	r22, r24
 5aa:	cd 01       	movw	r24, r26
 5ac:	d0 d0       	rcall	.+416    	; 0x74e <__fixunssfsi>
 5ae:	dc 01       	movw	r26, r24
 5b0:	cb 01       	movw	r24, r22
 5b2:	9f 8b       	std	Y+23, r25	; 0x17
 5b4:	8e 8b       	std	Y+22, r24	; 0x16
 5b6:	0f c0       	rjmp	.+30     	; 0x5d6 <delay_thread_us+0x154>
 5b8:	80 e9       	ldi	r24, 0x90	; 144
 5ba:	91 e0       	ldi	r25, 0x01	; 1
 5bc:	99 8f       	std	Y+25, r25	; 0x19
 5be:	88 8f       	std	Y+24, r24	; 0x18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 5c0:	88 8d       	ldd	r24, Y+24	; 0x18
 5c2:	99 8d       	ldd	r25, Y+25	; 0x19
 5c4:	01 97       	sbiw	r24, 0x01	; 1
 5c6:	f1 f7       	brne	.-4      	; 0x5c4 <delay_thread_us+0x142>
 5c8:	99 8f       	std	Y+25, r25	; 0x19
 5ca:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5cc:	8e 89       	ldd	r24, Y+22	; 0x16
 5ce:	9f 89       	ldd	r25, Y+23	; 0x17
 5d0:	01 97       	sbiw	r24, 0x01	; 1
 5d2:	9f 8b       	std	Y+23, r25	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5d4:	8e 8b       	std	Y+22, r24	; 0x16
 5d6:	8e 89       	ldd	r24, Y+22	; 0x16
 5d8:	9f 89       	ldd	r25, Y+23	; 0x17
 5da:	89 2b       	or	r24, r25
 5dc:	69 f7       	brne	.-38     	; 0x5b8 <delay_thread_us+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 5de:	3b c0       	rjmp	.+118    	; 0x656 <delay_thread_us+0x1d4>
 5e0:	6a 89       	ldd	r22, Y+18	; 0x12
 5e2:	7b 89       	ldd	r23, Y+19	; 0x13
 5e4:	8c 89       	ldd	r24, Y+20	; 0x14
 5e6:	9d 89       	ldd	r25, Y+21	; 0x15
 5e8:	b2 d0       	rcall	.+356    	; 0x74e <__fixunssfsi>
 5ea:	dc 01       	movw	r26, r24
 5ec:	cb 01       	movw	r24, r22
 5ee:	9f 8b       	std	Y+23, r25	; 0x17
 5f0:	8e 8b       	std	Y+22, r24	; 0x16
 5f2:	8e 89       	ldd	r24, Y+22	; 0x16
 5f4:	9f 89       	ldd	r25, Y+23	; 0x17
 5f6:	9b 8f       	std	Y+27, r25	; 0x1b
 5f8:	8a 8f       	std	Y+26, r24	; 0x1a
 5fa:	8a 8d       	ldd	r24, Y+26	; 0x1a
 5fc:	9b 8d       	ldd	r25, Y+27	; 0x1b
 5fe:	01 97       	sbiw	r24, 0x01	; 1
 600:	f1 f7       	brne	.-4      	; 0x5fe <delay_thread_us+0x17c>
 602:	9b 8f       	std	Y+27, r25	; 0x1b
 604:	8a 8f       	std	Y+26, r24	; 0x1a
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 606:	27 c0       	rjmp	.+78     	; 0x656 <delay_thread_us+0x1d4>
 608:	20 e0       	ldi	r18, 0x00	; 0
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	4f e7       	ldi	r20, 0x7F	; 127
 60e:	53 e4       	ldi	r21, 0x43	; 67
 610:	6d 81       	ldd	r22, Y+5	; 0x05
 612:	7e 81       	ldd	r23, Y+6	; 0x06
 614:	8f 81       	ldd	r24, Y+7	; 0x07
 616:	98 85       	ldd	r25, Y+8	; 0x08
 618:	3b d1       	rcall	.+630    	; 0x890 <__gesf2>
 61a:	18 16       	cp	r1, r24
	{
		uint16_t __ticks=(uint16_t)__tmp2;
 61c:	a4 f4       	brge	.+40     	; 0x646 <delay_thread_us+0x1c4>
 61e:	69 85       	ldd	r22, Y+9	; 0x09
 620:	7a 85       	ldd	r23, Y+10	; 0x0a
 622:	8b 85       	ldd	r24, Y+11	; 0x0b
 624:	9c 85       	ldd	r25, Y+12	; 0x0c
 626:	93 d0       	rcall	.+294    	; 0x74e <__fixunssfsi>
 628:	dc 01       	movw	r26, r24
 62a:	cb 01       	movw	r24, r22
 62c:	9d 8f       	std	Y+29, r25	; 0x1d
 62e:	8c 8f       	std	Y+28, r24	; 0x1c
 630:	8c 8d       	ldd	r24, Y+28	; 0x1c
 632:	9d 8d       	ldd	r25, Y+29	; 0x1d
 634:	9f 8f       	std	Y+31, r25	; 0x1f
 636:	8e 8f       	std	Y+30, r24	; 0x1e
 638:	8e 8d       	ldd	r24, Y+30	; 0x1e
 63a:	9f 8d       	ldd	r25, Y+31	; 0x1f
 63c:	01 97       	sbiw	r24, 0x01	; 1
 63e:	f1 f7       	brne	.-4      	; 0x63c <delay_thread_us+0x1ba>
 640:	9f 8f       	std	Y+31, r25	; 0x1f
	_delay_us(delay_interval_us);
	return;
 642:	8e 8f       	std	Y+30, r24	; 0x1e
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 644:	0f c0       	rjmp	.+30     	; 0x664 <delay_thread_us+0x1e2>
 646:	6d 81       	ldd	r22, Y+5	; 0x05
 648:	7e 81       	ldd	r23, Y+6	; 0x06
 64a:	8f 81       	ldd	r24, Y+7	; 0x07
 64c:	98 85       	ldd	r25, Y+8	; 0x08
 64e:	7f d0       	rcall	.+254    	; 0x74e <__fixunssfsi>
 650:	dc 01       	movw	r26, r24
 652:	cb 01       	movw	r24, r22
 654:	8d 87       	std	Y+13, r24	; 0x0d
 656:	8d 85       	ldd	r24, Y+13	; 0x0d
 658:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 65a:	88 a1       	ldd	r24, Y+32	; 0x20
 65c:	8a 95       	dec	r24
 65e:	f1 f7       	brne	.-4      	; 0x65c <delay_thread_us+0x1da>
 660:	88 a3       	std	Y+32, r24	; 0x20
 662:	00 00       	nop
	sei();
}
 664:	a4 96       	adiw	r28, 0x24	; 36
 666:	0f b6       	in	r0, 0x3f	; 63
 668:	f8 94       	cli
 66a:	de bf       	out	0x3e, r29	; 62
 66c:	0f be       	out	0x3f, r0	; 63
 66e:	cd bf       	out	0x3d, r28	; 61
 670:	df 91       	pop	r29
 672:	cf 91       	pop	r28
 674:	08 95       	ret

00000676 <__cmpsf2>:
 676:	97 d0       	rcall	.+302    	; 0x7a6 <__fp_cmp>
 678:	08 f4       	brcc	.+2      	; 0x67c <__cmpsf2+0x6>
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	08 95       	ret

0000067e <__divsf3>:
 67e:	0c d0       	rcall	.+24     	; 0x698 <__divsf3x>
 680:	cd c0       	rjmp	.+410    	; 0x81c <__fp_round>
 682:	c5 d0       	rcall	.+394    	; 0x80e <__fp_pscB>
 684:	40 f0       	brcs	.+16     	; 0x696 <__divsf3+0x18>
 686:	bc d0       	rcall	.+376    	; 0x800 <__fp_pscA>
 688:	30 f0       	brcs	.+12     	; 0x696 <__divsf3+0x18>
 68a:	21 f4       	brne	.+8      	; 0x694 <__divsf3+0x16>
 68c:	5f 3f       	cpi	r21, 0xFF	; 255
 68e:	19 f0       	breq	.+6      	; 0x696 <__divsf3+0x18>
 690:	ae c0       	rjmp	.+348    	; 0x7ee <__fp_inf>
 692:	51 11       	cpse	r21, r1
 694:	f7 c0       	rjmp	.+494    	; 0x884 <__fp_szero>
 696:	b1 c0       	rjmp	.+354    	; 0x7fa <__fp_nan>

00000698 <__divsf3x>:
 698:	d2 d0       	rcall	.+420    	; 0x83e <__fp_split3>
 69a:	98 f3       	brcs	.-26     	; 0x682 <__divsf3+0x4>

0000069c <__divsf3_pse>:
 69c:	99 23       	and	r25, r25
 69e:	c9 f3       	breq	.-14     	; 0x692 <__divsf3+0x14>
 6a0:	55 23       	and	r21, r21
 6a2:	b1 f3       	breq	.-20     	; 0x690 <__divsf3+0x12>
 6a4:	95 1b       	sub	r25, r21
 6a6:	55 0b       	sbc	r21, r21
 6a8:	bb 27       	eor	r27, r27
 6aa:	aa 27       	eor	r26, r26
 6ac:	62 17       	cp	r22, r18
 6ae:	73 07       	cpc	r23, r19
 6b0:	84 07       	cpc	r24, r20
 6b2:	38 f0       	brcs	.+14     	; 0x6c2 <__divsf3_pse+0x26>
 6b4:	9f 5f       	subi	r25, 0xFF	; 255
 6b6:	5f 4f       	sbci	r21, 0xFF	; 255
 6b8:	22 0f       	add	r18, r18
 6ba:	33 1f       	adc	r19, r19
 6bc:	44 1f       	adc	r20, r20
 6be:	aa 1f       	adc	r26, r26
 6c0:	a9 f3       	breq	.-22     	; 0x6ac <__divsf3_pse+0x10>
 6c2:	33 d0       	rcall	.+102    	; 0x72a <__divsf3_pse+0x8e>
 6c4:	0e 2e       	mov	r0, r30
 6c6:	3a f0       	brmi	.+14     	; 0x6d6 <__divsf3_pse+0x3a>
 6c8:	e0 e8       	ldi	r30, 0x80	; 128
 6ca:	30 d0       	rcall	.+96     	; 0x72c <__divsf3_pse+0x90>
 6cc:	91 50       	subi	r25, 0x01	; 1
 6ce:	50 40       	sbci	r21, 0x00	; 0
 6d0:	e6 95       	lsr	r30
 6d2:	00 1c       	adc	r0, r0
 6d4:	ca f7       	brpl	.-14     	; 0x6c8 <__divsf3_pse+0x2c>
 6d6:	29 d0       	rcall	.+82     	; 0x72a <__divsf3_pse+0x8e>
 6d8:	fe 2f       	mov	r31, r30
 6da:	27 d0       	rcall	.+78     	; 0x72a <__divsf3_pse+0x8e>
 6dc:	66 0f       	add	r22, r22
 6de:	77 1f       	adc	r23, r23
 6e0:	88 1f       	adc	r24, r24
 6e2:	bb 1f       	adc	r27, r27
 6e4:	26 17       	cp	r18, r22
 6e6:	37 07       	cpc	r19, r23
 6e8:	48 07       	cpc	r20, r24
 6ea:	ab 07       	cpc	r26, r27
 6ec:	b0 e8       	ldi	r27, 0x80	; 128
 6ee:	09 f0       	breq	.+2      	; 0x6f2 <__divsf3_pse+0x56>
 6f0:	bb 0b       	sbc	r27, r27
 6f2:	80 2d       	mov	r24, r0
 6f4:	bf 01       	movw	r22, r30
 6f6:	ff 27       	eor	r31, r31
 6f8:	93 58       	subi	r25, 0x83	; 131
 6fa:	5f 4f       	sbci	r21, 0xFF	; 255
 6fc:	2a f0       	brmi	.+10     	; 0x708 <__divsf3_pse+0x6c>
 6fe:	9e 3f       	cpi	r25, 0xFE	; 254
 700:	51 05       	cpc	r21, r1
 702:	68 f0       	brcs	.+26     	; 0x71e <__divsf3_pse+0x82>
 704:	74 c0       	rjmp	.+232    	; 0x7ee <__fp_inf>
 706:	be c0       	rjmp	.+380    	; 0x884 <__fp_szero>
 708:	5f 3f       	cpi	r21, 0xFF	; 255
 70a:	ec f3       	brlt	.-6      	; 0x706 <__divsf3_pse+0x6a>
 70c:	98 3e       	cpi	r25, 0xE8	; 232
 70e:	dc f3       	brlt	.-10     	; 0x706 <__divsf3_pse+0x6a>
 710:	86 95       	lsr	r24
 712:	77 95       	ror	r23
 714:	67 95       	ror	r22
 716:	b7 95       	ror	r27
 718:	f7 95       	ror	r31
 71a:	9f 5f       	subi	r25, 0xFF	; 255
 71c:	c9 f7       	brne	.-14     	; 0x710 <__divsf3_pse+0x74>
 71e:	88 0f       	add	r24, r24
 720:	91 1d       	adc	r25, r1
 722:	96 95       	lsr	r25
 724:	87 95       	ror	r24
 726:	97 f9       	bld	r25, 7
 728:	08 95       	ret
 72a:	e1 e0       	ldi	r30, 0x01	; 1
 72c:	66 0f       	add	r22, r22
 72e:	77 1f       	adc	r23, r23
 730:	88 1f       	adc	r24, r24
 732:	bb 1f       	adc	r27, r27
 734:	62 17       	cp	r22, r18
 736:	73 07       	cpc	r23, r19
 738:	84 07       	cpc	r24, r20
 73a:	ba 07       	cpc	r27, r26
 73c:	20 f0       	brcs	.+8      	; 0x746 <__divsf3_pse+0xaa>
 73e:	62 1b       	sub	r22, r18
 740:	73 0b       	sbc	r23, r19
 742:	84 0b       	sbc	r24, r20
 744:	ba 0b       	sbc	r27, r26
 746:	ee 1f       	adc	r30, r30
 748:	88 f7       	brcc	.-30     	; 0x72c <__divsf3_pse+0x90>
 74a:	e0 95       	com	r30
 74c:	08 95       	ret

0000074e <__fixunssfsi>:
 74e:	7f d0       	rcall	.+254    	; 0x84e <__fp_splitA>
 750:	88 f0       	brcs	.+34     	; 0x774 <__fixunssfsi+0x26>
 752:	9f 57       	subi	r25, 0x7F	; 127
 754:	90 f0       	brcs	.+36     	; 0x77a <__fixunssfsi+0x2c>
 756:	b9 2f       	mov	r27, r25
 758:	99 27       	eor	r25, r25
 75a:	b7 51       	subi	r27, 0x17	; 23
 75c:	a0 f0       	brcs	.+40     	; 0x786 <__fixunssfsi+0x38>
 75e:	d1 f0       	breq	.+52     	; 0x794 <__fixunssfsi+0x46>
 760:	66 0f       	add	r22, r22
 762:	77 1f       	adc	r23, r23
 764:	88 1f       	adc	r24, r24
 766:	99 1f       	adc	r25, r25
 768:	1a f0       	brmi	.+6      	; 0x770 <__fixunssfsi+0x22>
 76a:	ba 95       	dec	r27
 76c:	c9 f7       	brne	.-14     	; 0x760 <__fixunssfsi+0x12>
 76e:	12 c0       	rjmp	.+36     	; 0x794 <__fixunssfsi+0x46>
 770:	b1 30       	cpi	r27, 0x01	; 1
 772:	81 f0       	breq	.+32     	; 0x794 <__fixunssfsi+0x46>
 774:	86 d0       	rcall	.+268    	; 0x882 <__fp_zero>
 776:	b1 e0       	ldi	r27, 0x01	; 1
 778:	08 95       	ret
 77a:	83 c0       	rjmp	.+262    	; 0x882 <__fp_zero>
 77c:	67 2f       	mov	r22, r23
 77e:	78 2f       	mov	r23, r24
 780:	88 27       	eor	r24, r24
 782:	b8 5f       	subi	r27, 0xF8	; 248
 784:	39 f0       	breq	.+14     	; 0x794 <__fixunssfsi+0x46>
 786:	b9 3f       	cpi	r27, 0xF9	; 249
 788:	cc f3       	brlt	.-14     	; 0x77c <__fixunssfsi+0x2e>
 78a:	86 95       	lsr	r24
 78c:	77 95       	ror	r23
 78e:	67 95       	ror	r22
 790:	b3 95       	inc	r27
 792:	d9 f7       	brne	.-10     	; 0x78a <__fixunssfsi+0x3c>
 794:	3e f4       	brtc	.+14     	; 0x7a4 <__fixunssfsi+0x56>
 796:	90 95       	com	r25
 798:	80 95       	com	r24
 79a:	70 95       	com	r23
 79c:	61 95       	neg	r22
 79e:	7f 4f       	sbci	r23, 0xFF	; 255
 7a0:	8f 4f       	sbci	r24, 0xFF	; 255
 7a2:	9f 4f       	sbci	r25, 0xFF	; 255
 7a4:	08 95       	ret

000007a6 <__fp_cmp>:
 7a6:	99 0f       	add	r25, r25
 7a8:	00 08       	sbc	r0, r0
 7aa:	55 0f       	add	r21, r21
 7ac:	aa 0b       	sbc	r26, r26
 7ae:	e0 e8       	ldi	r30, 0x80	; 128
 7b0:	fe ef       	ldi	r31, 0xFE	; 254
 7b2:	16 16       	cp	r1, r22
 7b4:	17 06       	cpc	r1, r23
 7b6:	e8 07       	cpc	r30, r24
 7b8:	f9 07       	cpc	r31, r25
 7ba:	c0 f0       	brcs	.+48     	; 0x7ec <__fp_cmp+0x46>
 7bc:	12 16       	cp	r1, r18
 7be:	13 06       	cpc	r1, r19
 7c0:	e4 07       	cpc	r30, r20
 7c2:	f5 07       	cpc	r31, r21
 7c4:	98 f0       	brcs	.+38     	; 0x7ec <__fp_cmp+0x46>
 7c6:	62 1b       	sub	r22, r18
 7c8:	73 0b       	sbc	r23, r19
 7ca:	84 0b       	sbc	r24, r20
 7cc:	95 0b       	sbc	r25, r21
 7ce:	39 f4       	brne	.+14     	; 0x7de <__fp_cmp+0x38>
 7d0:	0a 26       	eor	r0, r26
 7d2:	61 f0       	breq	.+24     	; 0x7ec <__fp_cmp+0x46>
 7d4:	23 2b       	or	r18, r19
 7d6:	24 2b       	or	r18, r20
 7d8:	25 2b       	or	r18, r21
 7da:	21 f4       	brne	.+8      	; 0x7e4 <__fp_cmp+0x3e>
 7dc:	08 95       	ret
 7de:	0a 26       	eor	r0, r26
 7e0:	09 f4       	brne	.+2      	; 0x7e4 <__fp_cmp+0x3e>
 7e2:	a1 40       	sbci	r26, 0x01	; 1
 7e4:	a6 95       	lsr	r26
 7e6:	8f ef       	ldi	r24, 0xFF	; 255
 7e8:	81 1d       	adc	r24, r1
 7ea:	81 1d       	adc	r24, r1
 7ec:	08 95       	ret

000007ee <__fp_inf>:
 7ee:	97 f9       	bld	r25, 7
 7f0:	9f 67       	ori	r25, 0x7F	; 127
 7f2:	80 e8       	ldi	r24, 0x80	; 128
 7f4:	70 e0       	ldi	r23, 0x00	; 0
 7f6:	60 e0       	ldi	r22, 0x00	; 0
 7f8:	08 95       	ret

000007fa <__fp_nan>:
 7fa:	9f ef       	ldi	r25, 0xFF	; 255
 7fc:	80 ec       	ldi	r24, 0xC0	; 192
 7fe:	08 95       	ret

00000800 <__fp_pscA>:
 800:	00 24       	eor	r0, r0
 802:	0a 94       	dec	r0
 804:	16 16       	cp	r1, r22
 806:	17 06       	cpc	r1, r23
 808:	18 06       	cpc	r1, r24
 80a:	09 06       	cpc	r0, r25
 80c:	08 95       	ret

0000080e <__fp_pscB>:
 80e:	00 24       	eor	r0, r0
 810:	0a 94       	dec	r0
 812:	12 16       	cp	r1, r18
 814:	13 06       	cpc	r1, r19
 816:	14 06       	cpc	r1, r20
 818:	05 06       	cpc	r0, r21
 81a:	08 95       	ret

0000081c <__fp_round>:
 81c:	09 2e       	mov	r0, r25
 81e:	03 94       	inc	r0
 820:	00 0c       	add	r0, r0
 822:	11 f4       	brne	.+4      	; 0x828 <__fp_round+0xc>
 824:	88 23       	and	r24, r24
 826:	52 f0       	brmi	.+20     	; 0x83c <__fp_round+0x20>
 828:	bb 0f       	add	r27, r27
 82a:	40 f4       	brcc	.+16     	; 0x83c <__fp_round+0x20>
 82c:	bf 2b       	or	r27, r31
 82e:	11 f4       	brne	.+4      	; 0x834 <__fp_round+0x18>
 830:	60 ff       	sbrs	r22, 0
 832:	04 c0       	rjmp	.+8      	; 0x83c <__fp_round+0x20>
 834:	6f 5f       	subi	r22, 0xFF	; 255
 836:	7f 4f       	sbci	r23, 0xFF	; 255
 838:	8f 4f       	sbci	r24, 0xFF	; 255
 83a:	9f 4f       	sbci	r25, 0xFF	; 255
 83c:	08 95       	ret

0000083e <__fp_split3>:
 83e:	57 fd       	sbrc	r21, 7
 840:	90 58       	subi	r25, 0x80	; 128
 842:	44 0f       	add	r20, r20
 844:	55 1f       	adc	r21, r21
 846:	59 f0       	breq	.+22     	; 0x85e <__fp_splitA+0x10>
 848:	5f 3f       	cpi	r21, 0xFF	; 255
 84a:	71 f0       	breq	.+28     	; 0x868 <__fp_splitA+0x1a>
 84c:	47 95       	ror	r20

0000084e <__fp_splitA>:
 84e:	88 0f       	add	r24, r24
 850:	97 fb       	bst	r25, 7
 852:	99 1f       	adc	r25, r25
 854:	61 f0       	breq	.+24     	; 0x86e <__fp_splitA+0x20>
 856:	9f 3f       	cpi	r25, 0xFF	; 255
 858:	79 f0       	breq	.+30     	; 0x878 <__fp_splitA+0x2a>
 85a:	87 95       	ror	r24
 85c:	08 95       	ret
 85e:	12 16       	cp	r1, r18
 860:	13 06       	cpc	r1, r19
 862:	14 06       	cpc	r1, r20
 864:	55 1f       	adc	r21, r21
 866:	f2 cf       	rjmp	.-28     	; 0x84c <__fp_split3+0xe>
 868:	46 95       	lsr	r20
 86a:	f1 df       	rcall	.-30     	; 0x84e <__fp_splitA>
 86c:	08 c0       	rjmp	.+16     	; 0x87e <__fp_splitA+0x30>
 86e:	16 16       	cp	r1, r22
 870:	17 06       	cpc	r1, r23
 872:	18 06       	cpc	r1, r24
 874:	99 1f       	adc	r25, r25
 876:	f1 cf       	rjmp	.-30     	; 0x85a <__fp_splitA+0xc>
 878:	86 95       	lsr	r24
 87a:	71 05       	cpc	r23, r1
 87c:	61 05       	cpc	r22, r1
 87e:	08 94       	sec
 880:	08 95       	ret

00000882 <__fp_zero>:
 882:	e8 94       	clt

00000884 <__fp_szero>:
 884:	bb 27       	eor	r27, r27
 886:	66 27       	eor	r22, r22
 888:	77 27       	eor	r23, r23
 88a:	cb 01       	movw	r24, r22
 88c:	97 f9       	bld	r25, 7
 88e:	08 95       	ret

00000890 <__gesf2>:
 890:	8a df       	rcall	.-236    	; 0x7a6 <__fp_cmp>
 892:	08 f4       	brcc	.+2      	; 0x896 <__gesf2+0x6>
 894:	8f ef       	ldi	r24, 0xFF	; 255
 896:	08 95       	ret

00000898 <__mulsf3>:
 898:	0b d0       	rcall	.+22     	; 0x8b0 <__mulsf3x>
 89a:	c0 cf       	rjmp	.-128    	; 0x81c <__fp_round>
 89c:	b1 df       	rcall	.-158    	; 0x800 <__fp_pscA>
 89e:	28 f0       	brcs	.+10     	; 0x8aa <__mulsf3+0x12>
 8a0:	b6 df       	rcall	.-148    	; 0x80e <__fp_pscB>
 8a2:	18 f0       	brcs	.+6      	; 0x8aa <__mulsf3+0x12>
 8a4:	95 23       	and	r25, r21
 8a6:	09 f0       	breq	.+2      	; 0x8aa <__mulsf3+0x12>
 8a8:	a2 cf       	rjmp	.-188    	; 0x7ee <__fp_inf>
 8aa:	a7 cf       	rjmp	.-178    	; 0x7fa <__fp_nan>
 8ac:	11 24       	eor	r1, r1
 8ae:	ea cf       	rjmp	.-44     	; 0x884 <__fp_szero>

000008b0 <__mulsf3x>:
 8b0:	c6 df       	rcall	.-116    	; 0x83e <__fp_split3>
 8b2:	a0 f3       	brcs	.-24     	; 0x89c <__mulsf3+0x4>

000008b4 <__mulsf3_pse>:
 8b4:	95 9f       	mul	r25, r21
 8b6:	d1 f3       	breq	.-12     	; 0x8ac <__mulsf3+0x14>
 8b8:	95 0f       	add	r25, r21
 8ba:	50 e0       	ldi	r21, 0x00	; 0
 8bc:	55 1f       	adc	r21, r21
 8be:	62 9f       	mul	r22, r18
 8c0:	f0 01       	movw	r30, r0
 8c2:	72 9f       	mul	r23, r18
 8c4:	bb 27       	eor	r27, r27
 8c6:	f0 0d       	add	r31, r0
 8c8:	b1 1d       	adc	r27, r1
 8ca:	63 9f       	mul	r22, r19
 8cc:	aa 27       	eor	r26, r26
 8ce:	f0 0d       	add	r31, r0
 8d0:	b1 1d       	adc	r27, r1
 8d2:	aa 1f       	adc	r26, r26
 8d4:	64 9f       	mul	r22, r20
 8d6:	66 27       	eor	r22, r22
 8d8:	b0 0d       	add	r27, r0
 8da:	a1 1d       	adc	r26, r1
 8dc:	66 1f       	adc	r22, r22
 8de:	82 9f       	mul	r24, r18
 8e0:	22 27       	eor	r18, r18
 8e2:	b0 0d       	add	r27, r0
 8e4:	a1 1d       	adc	r26, r1
 8e6:	62 1f       	adc	r22, r18
 8e8:	73 9f       	mul	r23, r19
 8ea:	b0 0d       	add	r27, r0
 8ec:	a1 1d       	adc	r26, r1
 8ee:	62 1f       	adc	r22, r18
 8f0:	83 9f       	mul	r24, r19
 8f2:	a0 0d       	add	r26, r0
 8f4:	61 1d       	adc	r22, r1
 8f6:	22 1f       	adc	r18, r18
 8f8:	74 9f       	mul	r23, r20
 8fa:	33 27       	eor	r19, r19
 8fc:	a0 0d       	add	r26, r0
 8fe:	61 1d       	adc	r22, r1
 900:	23 1f       	adc	r18, r19
 902:	84 9f       	mul	r24, r20
 904:	60 0d       	add	r22, r0
 906:	21 1d       	adc	r18, r1
 908:	82 2f       	mov	r24, r18
 90a:	76 2f       	mov	r23, r22
 90c:	6a 2f       	mov	r22, r26
 90e:	11 24       	eor	r1, r1
 910:	9f 57       	subi	r25, 0x7F	; 127
 912:	50 40       	sbci	r21, 0x00	; 0
 914:	8a f0       	brmi	.+34     	; 0x938 <__mulsf3_pse+0x84>
 916:	e1 f0       	breq	.+56     	; 0x950 <__mulsf3_pse+0x9c>
 918:	88 23       	and	r24, r24
 91a:	4a f0       	brmi	.+18     	; 0x92e <__mulsf3_pse+0x7a>
 91c:	ee 0f       	add	r30, r30
 91e:	ff 1f       	adc	r31, r31
 920:	bb 1f       	adc	r27, r27
 922:	66 1f       	adc	r22, r22
 924:	77 1f       	adc	r23, r23
 926:	88 1f       	adc	r24, r24
 928:	91 50       	subi	r25, 0x01	; 1
 92a:	50 40       	sbci	r21, 0x00	; 0
 92c:	a9 f7       	brne	.-22     	; 0x918 <__mulsf3_pse+0x64>
 92e:	9e 3f       	cpi	r25, 0xFE	; 254
 930:	51 05       	cpc	r21, r1
 932:	70 f0       	brcs	.+28     	; 0x950 <__mulsf3_pse+0x9c>
 934:	5c cf       	rjmp	.-328    	; 0x7ee <__fp_inf>
 936:	a6 cf       	rjmp	.-180    	; 0x884 <__fp_szero>
 938:	5f 3f       	cpi	r21, 0xFF	; 255
 93a:	ec f3       	brlt	.-6      	; 0x936 <__mulsf3_pse+0x82>
 93c:	98 3e       	cpi	r25, 0xE8	; 232
 93e:	dc f3       	brlt	.-10     	; 0x936 <__mulsf3_pse+0x82>
 940:	86 95       	lsr	r24
 942:	77 95       	ror	r23
 944:	67 95       	ror	r22
 946:	b7 95       	ror	r27
 948:	f7 95       	ror	r31
 94a:	e7 95       	ror	r30
 94c:	9f 5f       	subi	r25, 0xFF	; 255
 94e:	c1 f7       	brne	.-16     	; 0x940 <__mulsf3_pse+0x8c>
 950:	fe 2b       	or	r31, r30
 952:	88 0f       	add	r24, r24
 954:	91 1d       	adc	r25, r1
 956:	96 95       	lsr	r25
 958:	87 95       	ror	r24
 95a:	97 f9       	bld	r25, 7
 95c:	08 95       	ret

0000095e <memset>:
 95e:	dc 01       	movw	r26, r24
 960:	01 c0       	rjmp	.+2      	; 0x964 <memset+0x6>
 962:	6d 93       	st	X+, r22
 964:	41 50       	subi	r20, 0x01	; 1
 966:	50 40       	sbci	r21, 0x00	; 0
 968:	e0 f7       	brcc	.-8      	; 0x962 <memset+0x4>
 96a:	08 95       	ret

0000096c <_exit>:
 96c:	f8 94       	cli

0000096e <__stop_program>:
 96e:	ff cf       	rjmp	.-2      	; 0x96e <__stop_program>
